#!/bin/sh -x

# bin/compile BUILD_DIR CACHE_DIR ENV_DIR

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LP_DIR=`cd $(dirname $0); cd ..; pwd`

export_env_dir() {
  env_dir=$ENV_DIR
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir()

if [ ! -e $CACHE_DIR ]; then
    mkdir -p $CACHE_DIR
fi

# create dir to put all our stuff

if [ ! -e $CACHE_DIR/icu ]; then
    # get ICU
    wget -O $CACHE_DIR/icu4c-4_8_1_1-src.tgz http://download.icu-project.org/files/icu4c/4.8.1.1/icu4c-4_8_1_1-src.tgz
    tar -xzf $CACHE_DIR/icu4c-4_8_1_1-src.tgz -C $CACHE_DIR
    rm -f $CACHE_DIR/icu4c-4_8_1_1-src.tgz
fi

# build and install ICU
cd $CACHE_DIR/icu/source
if [ ! -e ./.configured ]; then
    ./configure --prefix=$BUILD_DIR/usr/
    touch .configured
fi
make > /dev/null && make install > /dev/null
echo "Installed icu"


if [ ! -e $CACHE_DIR/js-1.8.5 ]; then
    # get spidermonkey
    wget -O $CACHE_DIR/js-1.8.5.tar.gz http://ftp.mozilla.org/pub/mozilla.org/js/js185-1.0.0.tar.gz 
    tar -xzf $CACHE_DIR/js-1.8.5.tar.gz -C $CACHE_DIR
    rm -f $CACHE_DIR/js-1.8.5.tar.gz
fi

# build and install spidermonkey
cd $CACHE_DIR/js-1.8.5/js/src
if [ ! -e ./.configured ]; then
    ./configure --prefix=$BUILD_DIR/usr/
    touch .configured
fi
make > /dev/null && make install > /dev/null
rm js
echo "Installed spidermonkey"


if [ ! -e $CACHE_DIR/otp_src_17.1 ]; then
    # get erlang
    wget -O $CACHE_DIR/otp_src_17.1.tar.gz http://www.erlang.org/download/otp_src_17.1.tar.gz
    tar -xzf $CACHE_DIR/otp_src_17.1.tar.gz -C $CACHE_DIR
    rm -f $CACHE_DIR/otp_src_17.1.tar.gz
fi


# some step ahead chokes if this file exists

# build and install erlang
cd $CACHE_DIR/otp_src_17.1
if [ ! -e ./.configured ]; then
    ./configure --prefix=$BUILD_DIR/usr/
    touch .configured
fi
make > /dev/null && make install > /dev/null
echo "Installed erlang"


if [ ! -e $CACHE_DIR/apache-couchdb-1.6.0 ]; then
    # get couchdb
    wget -O $CACHE_DIR/ http://ftp.carnet.hr/misc/apache/couchdb/source/1.6.0/apache-couchdb-1.6.0.tar.gz
    tar -xzf $CACHE_DIR/apache-couchdb-1.6.0.tar.gz -C $CACHE_DIR
    rm -f $CACHE_DIR/apache-couchdb-1.6.0.tar.gz
fi


# build couchdb
cd $CACHE_DIR/apache-couchdb-1.6.0
export PATH=$PATH:$CACHE_DIR/usr/bin/:$CACHE_DIR/usr/local/bin
export ICU_CONFIG="$CACHE_DIR/usr/bin/icu-config --detect-prefix"
export ICU_CPPFLAGS="-I$CACHE_DIR/usr/include/"
if [ ! -e ./.configured ]; then
    ./configure --prefix=$BUILD_DIR --with-js-lib=$BUILD_DIR/usr/lib/ --with-js-include=$BUILD_DIR/usr/include/js/ --with-erlang=$BUILD_DIR/usr/lib/erlang/usr/include/
    touch .configured
fi
make > /dev/null && make install > /dev/null
echo "Installed couchdb"


cat > $BUILD_DIR/etc/default/couchdb << EOM
# Sourced by init script for configuration.

# we use the current username to run couchdb
#COUCHDB_USER=couchdb
COUCHDB_STDOUT_FILE=/dev/null
COUCHDB_STDERR_FILE=/dev/null
COUCHDB_RESPAWN_TIMEOUT=5
COUCHDB_OPTIONS=
EOM

# change port and bind_address where openshift expects DIY apps to serve
cat > $BUILD_DIR/etc/couchdb/local.ini << EOM
[httpd]
port = $PORT
bind_address = "0.0.0.0"
EOM
